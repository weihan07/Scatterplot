const url ="https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json"

// Fetch data 
fetch(url)
    .then(response => response.json())
    .then(dataset => {
        // Chart Dimensions
        const w = 1000;
        const h = 500;
        const p = 60;

        const timeParse = d3.timeParse("%M:%S");

        // Parse time data
        dataset.forEach(d => {
            d.Time = timeParse(d.Time);
        });

        // Create SVG container
        const svg = d3.select("#scatterplot")
                      .append("svg")
                      .attr("width", w)
                      .attr("height", h)
        
        // Scales
        const xScale = d3.scaleLinear()
                        .domain([d3.min(dataset, d => d.Year) - 1,
                                  d3.max(dataset, d => d.Year) + 1])
                        .range([p, w - p]);

        const yScale = d3.scaleTime()
                        .domain(d3.extent(dataset, d => d.Time))
                        .range([p, h - p]);
        

        // Axes
        svg.append("g")
          .attr("id", "x-axis")
          .attr("transform", `translate(0, ${h - p})`)
          .call(d3.axisBottom(xScale).tickFormat(d3.format("d")));

        svg.append("g")
          .attr("id", "y-axis")
          .attr("transform", `translate(${p}, 0)`)
          .call(d3.axisLeft(yScale).tickFormat(d3.timeFormat("%M:%S")));


        // Scatterplot
        svg.selectAll(".dot")
          .data(dataset)
          .enter()
          .append("circle")
          .attr("class", "dot")
          .attr("cx", d => xScale(d.Year))
          .attr("cy", d => yScale(d.Time))
          .attr("r", 6)
          .attr("data-xvalue", d => d.Year)
          .attr("data-yvalue", d => d.Time)
          .style("fill", (d) => (d.Doping ? "orange" : "blue"))
          .on("mouseover", (event, d) => {
                const tooltip = d3.select("#tooltip");
                tooltip.style("visibility", "visible")
                        .style("left", `${event.pageX + 10}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .attr("data-year", d.Year)
                        .html(`
                            <strong>${d.Name} (${d.Nationality})</strong><br>
                            Year: ${d.Year}<br>
                            Time: ${d3.timeFormat("%M:%S")(d.Time)}<br>
                            ${d.Doping ? `<br>${d.Doping}` : "No Allegations"}
                        `);
          })
          .on("mouseout", () => {
            d3.select("#tooltip")
              .style("visibility", "hidden");
          });


        // Title
        svg.append("text")
            .attr("x", w / 2)
            .attr("y", p / 2)
            .attr("id", "title")
            .style("text-anchor", "middle")
        

        // Legend
        const legend = svg.append("g")
                          .attr("id", "legend")
                          .attr("transform", `translate(${w - 150}, ${h / 2 - 30})`);       // Adjust position

        legend.append("circle")
              .attr("cx", 0)
              .attr("cy", 0)
              .attr("r", 6)
            .style("fill", "orange");

        legend.append("text")
              .attr("x", 10)
              .attr("y", 4)
              .text("Riders with doping allegations")
              .style("font-size", "12px")
              .attr("alignment-baseline", "middle");

        legend.append("circle")
              .attr("cx", 0)
              .attr("cy", 20)
              .attr("r", 6)
              .style("fill", "blue");

        legend.append("text")
              .attr("x", 10)
              .attr("y", 24)
              .text("No doping allegations")
              .style("font-size", "12px")
              .attr("alignment-baseline", "middle");


        // x-axis label
        svg.append("text")
           .attr("id", "x-axis-label")
           .attr("x", w / 2)
           .attr("y", h - p / 4)
           .style("text-anchor", "middle")
           .text("Year");


        // y-axis label
        svg.append("text")
           .attr("id", "y-axis-label")
           .attr("x", -h / 2)
           .attr("y", p / 4)
           .attr("transform", "rotate(-90)")
           .style("text-anchor", "middle")
           .text("Time in Minutes");
    });